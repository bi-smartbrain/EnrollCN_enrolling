import json
import time
import random
import pandas as pd
from datetime import datetime as dt
import color_prints as p
from config import Config
from api_client import APIClient
from logger import setup_logger

logger = setup_logger()


class EnrollProcessor:
    def __init__(self, functions_module):
        self.f = functions_module
        self.api_client = APIClient(functions_module.api)
        self.last_run_date = None

    def should_run_today(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä–∏–ø—Ç —Å–µ–≥–æ–¥–Ω—è"""
        today = dt.now().weekday()
        if today not in Config.WORKING_DAYS:
            p.print_warning(f"–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å, —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
            return False

        today_str = dt.now().strftime("%Y-%m-%d")
        if self.last_run_date == today_str:
            p.print_warning(f"–°–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è —Å–µ–≥–æ–¥–Ω—è {today_str}")
            return False

        return True

    def load_enrolling_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        p.print_info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞...")

        enrolling_sheets = self.f.get_sheet_titles(Config.SPREAD_NAME)
        enrolling_reg = pd.DataFrame(columns=['email', 'url', 'filters_json', 'seq_name', 'sheet_name'])

        for sheet_name in enrolling_sheets:
            if Config.SHEET_PREFIX in sheet_name:
                sheet_range = self.f.get_sheet_range(
                    spread=Config.SPREAD_NAME,
                    income_sheet=sheet_name,
                    income_range="A:C"
                )
                if not sheet_range:
                    p.print_warning(f"–ü—É—Å—Ç–æ–π –ª–∏—Å—Ç: {sheet_name}")
                    continue

                seq_name = sheet_range[0][0]
                sheet_reg = pd.DataFrame(sheet_range[3:])
                sheet_reg = sheet_reg.iloc[:, :3]
                sheet_reg.columns = ['email', 'url', 'filters_json']
                sheet_reg['seq_name'] = seq_name
                sheet_reg['sheet_name'] = sheet_name
                enrolling_reg = pd.concat([enrolling_reg, sheet_reg], ignore_index=True)

        email_lists = []
        if email_lists:
            enrolling_reg = enrolling_reg[enrolling_reg['email'].isin(email_lists)]

        p.print_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(enrolling_reg)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return enrolling_reg.to_dict(orient='records')

    def get_sequence_ids(self, enrolling_reg):
        """–ü–æ–ª—É—á–∞–µ–º ID —Ü–µ–ø–æ—á–µ–∫"""
        seq_names = {row['seq_name'] for row in enrolling_reg}

        seqID_dict = {}
        for seq_name in seq_names:
            try:
                seq = self.f.find_sequence_by_name(seq_name)
                seq_id = seq['id'] if seq else None
                seqID_dict[seq_name] = seq_id
                if seq_id:
                    p.print_success(f"–ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ø–æ—á–∫–∞: {seq_name} -> {seq_id}")
                else:
                    p.print_warning(f"–¶–µ–ø–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {seq_name}")
            except Exception as e:
                p.print_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ü–µ–ø–æ—á–∫–∏ {seq_name}: {str(e)}")
                seqID_dict[seq_name] = None

        return seqID_dict

    def process_enrollment(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞"""
        if not self.should_run_today():
            return True, "Skipped - not a working day or already run today"

        try:
            enrolling_reg = self.load_enrolling_data()
            if not enrolling_reg:
                p.print_warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞")
                return True, "No data to process"

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
            total_subscriptions = len([r for r in enrolling_reg if r['filters_json']])
            start_message = f"üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞\n–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_subscriptions}"
            p.print_info(start_message)
            logger.info(start_message)

            seqID_dict = self.get_sequence_ids(enrolling_reg)

            report = [['date_time', 'url', 'sheet', 'seq_name', 'email', 'total_leads', 'bulk_response']]
            success_count = 0
            error_count = 0
            total_count = len([r for r in enrolling_reg if r['filters_json']])

            p.print_info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_count} –ø–æ–¥–ø–∏—Å–æ–∫...")

            for i, row in enumerate(enrolling_reg):
                if not row['filters_json']:
                    continue

                try:
                    result = self.process_single_subscription(row, seqID_dict)
                    report.append(result)

                    if any(error_indicator in str(result[-1]).lower() for error_indicator in
                           ['error', '–Ω–µ –Ω–∞–π–¥–µ–Ω', 'exception']) or "–Ω–µ—Ç" in str(result[-2]).lower():
                        error_count += 1
                    else:
                        success_count += 1

                    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2-5 —Å–µ–∫—É–Ω–¥
                    if i < total_count - 1:
                        delay = random.uniform(Config.SUBSCRIPTION_DELAY_MIN, Config.SUBSCRIPTION_DELAY_MAX)
                        time.sleep(delay)

                except Exception as e:
                    error_count += 1
                    p.print_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {row['email']}: {str(e)}")
                    date_time = dt.now().strftime("%m/%d/%Y, %H:%M:%S")
                    report.append([
                        date_time,
                        row['url'],
                        row['sheet_name'].replace(Config.SHEET_PREFIX, ''),
                        row['seq_name'],
                        row['email'],
                        f"critical_error: {str(e)}",
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                    ])

            # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            self._save_report(report)
            return self._analyze_results(success_count, error_count, total_count)

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {str(e)}"
            p.print_error(error_msg)
            logger.error(f"üî¥ ENROLLING CRITICAL: {error_msg}")
            return False, f"Process error: {str(e)}"

    def _save_report(self, report):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ Google Sheets"""
        if len(report) > 1:
            self.f.add_report_to_sheet(
                spread=Config.SPREAD_NAME,
                sheet='enrolling_pyReport',
                report=report[1:]
            )
            p.print_success("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            p.print_warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")

    def _analyze_results(self, success_count, error_count, total_count):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        p.print_info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫")

        if total_count > 0:
            error_ratio = error_count / total_count
            if error_ratio >= Config.ERROR_THRESHOLD:
                error_msg = f"–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨ –û–®–ò–ë–û–ö! –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {error_count} –∏–∑ {total_count} ({error_ratio:.1%})"
                p.print_error(error_msg)
                logger.error(f"üî¥ ENROLLING CRITICAL: {error_msg}")

                stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞ (–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨):\n–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {success_count} –∏–∑ {total_count}\n–û—à–∏–±–æ–∫: {error_count}"
                logger.error(stats_message)

                return False, f"Critical error threshold reached: {error_ratio:.1%}"
            else:
                stats_message = f"‚úÖ –≠–Ω—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n–£—Å–ø–µ—à–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {success_count} –∏–∑ {total_count}\n–û—à–∏–±–æ–∫: {error_count}"
                p.print_success(stats_message)
                logger.info(stats_message)
        else:
            p.print_warning("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        self.last_run_date = dt.now().strftime("%Y-%m-%d")
        return True, f"Success: {success_count}/{total_count}"

    def process_single_subscription(self, row, seqID_dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–æ–¥–ø–∏—Å–∫—É"""
        p.print_info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {row['url']} -> {row['email']}")

        query = json.loads(row['filters_json'])

        # –ü–æ–∏—Å–∫ –ª–∏–¥–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        try:
            search_response = self.api_client.search_leads(query)
            total_leads = search_response['count']['total']
            p.print_success(f"–ù–∞–π–¥–µ–Ω–æ –ª–∏–¥–æ–≤: {total_leads}")
        except Exception as e:
            total_leads = f"search_error: {str(e)}"
            p.print_error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")

        # –ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
        emailacct = self.f.find_emailacct_by_email(row['email'])
        sequence_id = seqID_dict[row['seq_name']]

        bulk_response = ''

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        if not emailacct and not sequence_id:
            bulk_response = f"—è—â–∏–∫ {row['email']} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ü–µ–ø–æ—á–∫–∞ {row['seq_name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            total_leads = f'–ù–ï–¢\n{bulk_response}'
            p.print_error(bulk_response)
        elif not emailacct:
            bulk_response = f"—è—â–∏–∫ {row['email']} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            total_leads = f'–ù–ï–¢\n{bulk_response}'
            p.print_error(bulk_response)
        elif not sequence_id:
            bulk_response = f"—Ü–µ–ø–æ—á–∫–∞ {row['seq_name']} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            total_leads = f'–ù–ï–¢\n{bulk_response}'
            p.print_error(bulk_response)
        else:
            # –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            sender_name = None
            for item in emailacct['identities']:
                if item['email'].lower() == row['email'].lower():
                    sender_name = item['name']
                    break

            data = {
                "action_type": "subscribe",
                "sequence_id": sequence_id,
                "send_done_email": False,
                "sender_account_id": emailacct['id'],
                "sender_email": emailacct['email'],
                "contact_preference": "lead",
                "s_query": query['query'],
                "sort": query['sort'],
                "results_limit": query['results_limit'],
            }

            if sender_name:
                data["sender_name"] = sender_name

            try:
                resp = self.api_client.subscribe_sequence(data)
                bulk_response = "–£—Å–ø–µ—à–Ω–æ"
                p.print_success(f"–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {row['email']} -> {row['seq_name']}")
            except Exception as e:
                bulk_response = str(e)
                total_leads = f"error\n{bulk_response}"
                p.print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")

        date_time = dt.now().strftime("%m/%d/%Y, %H:%M:%S")
        return [
            date_time,
            row['url'],
            row['sheet_name'].replace(Config.SHEET_PREFIX, ''),
            row['seq_name'],
            row['email'],
            total_leads,
            bulk_response
        ]
