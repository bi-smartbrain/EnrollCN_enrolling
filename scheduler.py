import time
import threading
from datetime import datetime, time as dt_time
from config import Config
from enroll_processor import EnrollProcessor
import color_prints as p
from logger import setup_logger

logger = setup_logger()


class Scheduler:
    def __init__(self, functions_module):
        self.processor = EnrollProcessor(functions_module)
        self.functions = functions_module
        self.is_running = True

    def should_run_now(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ–π—á–∞—Å"""
        now = datetime.now()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if now.weekday() not in Config.WORKING_DAYS:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        current_time = now.time()
        target_time = Config.SCHEDULE_TIME

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ü–µ–ª–µ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_diff = abs((current_time.hour * 60 + current_time.minute) -
                        (target_time.hour * 60 + target_time.minute))
        return time_diff <= 1

    def run_scheduled(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        p.print_info("üïê –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
        success, message = self.processor.process_enrollment()

        if not success:
            p.print_error(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π: {message}")
            if Config.RESTART_ON_CRITICAL_ERROR:
                p.print_info("–ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å...")
                self._restart_on_error()
            else:
                p.print_info("–û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")

    def _restart_on_error(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        try:
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            time.sleep(300)
            p.print_info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏...")
            self.run_scheduled()
        except Exception as e:
            p.print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}")
            logger.error(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {str(e)}")

    def run_once(self):
        """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫"""
        p.print_info("‚ñ∂Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞...")
        logger.info("‚ñ∂Ô∏è –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞")

        success, message = self.processor.process_enrollment()

        if success:
            p.print_success(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É: {message}")
        else:
            p.print_error(f"–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {message}")

        return success

    def check_schedule(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏"""
        last_run_day = None

        while self.is_running:
            try:
                now = datetime.now()
                today_str = now.strftime("%Y-%m-%d")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ–π—á–∞—Å
                if (self.should_run_now() and
                        last_run_day != today_str and
                        now.weekday() in Config.WORKING_DAYS):
                    p.print_info(f"üïê –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {Config.SCHEDULE_TIME}")
                    self.run_scheduled()
                    last_run_day = today_str

                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

            except Exception as e:
                p.print_error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
                logger.error(f"üî¥ –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {str(e)}")
                time.sleep(60)

    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        p.print_success(f"–°–∫—Ä–∏–ø—Ç —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ {Config.SCHEDULE_TIME} –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏...")
        logger.info(f"üü¢ –°–∫—Ä–∏–ø—Ç —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {Config.SCHEDULE_TIME} –ü–Ω-–ü—Ç")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = threading.Thread(target=self.check_schedule, daemon=True)
        scheduler_thread.start()

        try:
            # –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–∏–ª–∏ Ctrl+C)
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            p.print_info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            logger.info("‚èπÔ∏è –°–∫—Ä–∏–ø—Ç —ç–Ω—Ä–æ–ª–ª–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.is_running = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
